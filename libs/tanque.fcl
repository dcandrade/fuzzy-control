/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT
	dv : REAL; // diferença da vazão (saída - desejada)
	dt : REAL; // variação da temperatura (saída - desejada)
END_VAR

VAR_OUTPUT				// Define output variable
	vq : REAL; //hot water input
	vf : REAL; //cold water input
END_VAR

FUZZIFY dv			
	TERM slightly_above := (0, 0) (25, 1) (50,0);
	TERM ok := (-10, 0) (0, 1) (10,0);
        TERM slightly_below := (-50, 0) (-25, 1) (0, 0); 

	TERM above := (25, 0) (50,1) (75,0);
	TERM below := (-75, 0) (-50,1) (-25,0);
	
        TERM far_above := (50, 0) (75, 1) (100, 1);
	TERM far_below := (-100, 1) (-75, 1) (-50, 0);
END_FUZZIFY

FUZZIFY dt			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM slightly_above := (0, 0) (25, 1) (50,0);
	TERM ok := (-10, 0) (0, 1) (10,0);
        TERM slightly_below := (-50, 0) (-25, 1) (0, 0); 

	TERM above := (25, 0) (50,1) (75,0);
	TERM below := (-75, 0) (-50,1) (-25,0);
	
        TERM far_above := (50, 0) (75, 1) (100, 1);
	TERM far_below := (-100, 1) (-75, 1) (-50, 0);
END_FUZZIFY

DEFUZZIFY vf			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM slightly_more :=  (-5, 0) (0, 1) (50,0); 
        TERM slightly_less := (-50, 0) (0, 1) (5, 0); 

	TERM more := (25, 0) (50,1) (75,0);
	TERM less := (-75, 0) (-50,1) (-25,0);
	
        TERM much_more := (50, 0) (75, 1) (100, 1);
	TERM much_less := (-100, 1) (-75, 1) (-50, 0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY vq		// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM slightly_more :=  (-5, 0) (0, 1) (50,0); 
        TERM slightly_less := (-50, 0) (0, 1) (5, 0); 

	TERM more := (25, 0) (50,1) (75,0);
	TERM less := (-75, 0) (-50,1) (-25,0);
	
        TERM much_more := (50, 0) (75, 1) (100, 1);
	TERM much_less := (-100, 1) (-75, 1) (-50, 0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
        
        // Case 1
        RULE 1 : IF dv IS slightly_above AND dt IS ok THEN vq IS slightly_less;
        RULE 2 : IF dv IS slightly_above AND dt IS ok THEN vf IS slightly_less;
        
        // Case 2:
        RULE 3 : IF dv IS slightly_above AND dt IS slightly_above THEN vq IS slightly_less;
        RULE 4 : IF dv IS slightly_above AND dt IS slightly_below THEN vf IS slightly_less;
        
        // Case 3:
        RULE 5 : IF dv IS ok AND dt IS slightly_above THEN vq IS slightly_less;
        RULE 6 : IF dv IS ok AND dt IS slightly_above THEN vf IS slightly_more;
        
        // Case 4:
        RULE 5 : IF dv IS ok AND dt IS slightly_below THEN vq IS slightly_more;
        RULE 6 : IF dv IS ok AND dt IS slightly_below THEN vf IS slightly_less;
        
END_RULEBLOCK

END_FUNCTION_BLOCK

